name: Advanced CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      run_performance_tests:
        description: 'Run performance tests'
        required: false
        default: 'false'
        type: choice
        options:
        - 'true'
        - 'false'

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: '1.4.2'

jobs:
  # =====================================
  # Dependency Management & Caching
  # =====================================
  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=deps-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}" >> $GITHUB_OUTPUT
      
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
            .venv
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            deps-
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install and cache dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          
      - name: Check for dependency vulnerabilities
        run: |
          pip install safety
          safety check --json --output safety-report.json || true
          
      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-analysis
          path: safety-report.json

  # =====================================
  # Parallel Testing Matrix
  # =====================================
  test-matrix:
    name: Test Matrix
    runs-on: ${{ matrix.os }}
    needs: dependency-check
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ['3.11']
        test-group: [
          'unit-core',
          'unit-ml', 
          'unit-spark',
          'integration',
          'end-to-end'
        ]
        include:
          - test-group: 'unit-core'
            test-path: 'tests/unit/test_preprocessing.py tests/unit/test_sentiment_models.py'
          - test-group: 'unit-ml'
            test-path: 'tests/unit/test_deep_learning_models.py tests/unit/test_entity_recognition.py'
          - test-group: 'unit-spark'
            test-path: 'tests/unit/test_trend_detection.py'
          - test-group: 'integration'
            test-path: 'tests/integration/'
          - test-group: 'end-to-end'
            test-path: 'tests/e2e/'

    steps:
      - uses: actions/checkout@v4
      
      - name: Restore dependency cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
            .venv
          key: ${{ needs.dependency-check.outputs.cache-key }}
          
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Set up Java (for Spark)
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          python -m spacy download en_core_web_sm
          
      - name: Run tests with coverage
        run: |
          pytest ${{ matrix.test-path }} \
            --cov=src \
            --cov-report=xml \
            --cov-report=term-missing \
            --junitxml=test-results-${{ matrix.test-group }}-${{ matrix.os }}.xml \
            --maxfail=5 \
            -v
            
      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.test-group }}-${{ matrix.os }}
          path: |
            test-results-*.xml
            coverage.xml
            
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: ${{ matrix.test-group }}
          name: ${{ matrix.os }}-${{ matrix.test-group }}

  # =====================================
  # Code Quality & Security Analysis
  # =====================================
  advanced-analysis:
    name: Advanced Code Analysis
    runs-on: ubuntu-latest
    needs: dependency-check
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Restore dependency cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pip
            ~/.cache/pre-commit
            .venv
          key: ${{ needs.dependency-check.outputs.cache-key }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install analysis tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt
          pip install sonarqube-quality-gate-action
          pip install radon xenon complexity-analysis
          
      - name: Run complexity analysis
        run: |
          radon cc src/ --json > complexity-report.json
          radon mi src/ --json > maintainability-report.json
          xenon --max-absolute B --max-modules A --max-average A src/
          
      - name: Run docstring coverage
        run: |
          python scripts/check_docstrings.py --fail-under=80
          
      - name: Advanced security scan
        run: |
          bandit -r src/ -f json -o bandit-detailed-report.json
          
      - name: Check code duplication
        run: |
          pip install jscpd
          jscpd src/ --output=duplication-report.json --format=json || true
          
      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis
          path: |
            complexity-report.json
            maintainability-report.json
            bandit-detailed-report.json
            duplication-report.json
            docstring_coverage_report.txt

  # =====================================
  # Performance & Load Testing
  # =====================================
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [dependency-check, test-matrix]
    if: github.event.inputs.run_performance_tests == 'true' || github.event_name == 'schedule'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install pytest-benchmark memory-profiler
          
      - name: Run performance benchmarks
        run: |
          python scripts/benchmark_performance.py
          
      - name: Memory profiling
        run: |
          python -m memory_profiler scripts/train_all_models.py
          
      - name: Upload performance results
        uses: actions/upload-artifact@v3
        with:
          name: performance-results
          path: |
            benchmarks/
            *.prof
            *.png

  # =====================================
  # Multi-Architecture Docker Build
  # =====================================
  docker-build:
    name: Multi-Arch Docker Build
    runs-on: ubuntu-latest
    needs: [test-matrix, advanced-analysis]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push multi-arch image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  # =====================================
  # Advanced Deployment
  # =====================================
  deploy:
    name: Advanced Deployment
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your deployment commands here
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests..."
          # Add smoke test commands
          
      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add production deployment commands
          
      - name: Health check
        run: |
          echo "Performing health checks..."
          # Add health check commands
          
      - name: Notify deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          text: "MICAP deployment to production: ${{ job.status }}" 