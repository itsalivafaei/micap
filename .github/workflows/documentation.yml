name: Documentation CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # =====================================
  # Documentation Quality Check
  # =====================================
  docstring-check:
    name: Check Docstrings
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-v2-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-v2-

      - name: Install dependencies
        run: |
          chmod +x .github/scripts/install_dependencies.sh
          export INSTALL_DEV=false
          export DOWNLOAD_SPACY=false
          ./.github/scripts/install_dependencies.sh "pydocstyle interrogate"

      - name: Check docstring coverage
        run: |
          interrogate src/ --verbose --fail-under=80 --ignore-init-method --ignore-magic

      - name: Check docstring style
        run: |
          pydocstyle src/ --convention=google
        continue-on-error: true

  # =====================================
  # Generate Documentation
  # =====================================
  build-docs:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: docstring-check
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-v2-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-v2-

      - name: Install dependencies
        run: |
          chmod +x .github/scripts/install_dependencies.sh
          export INSTALL_DEV=false
          export DOWNLOAD_SPACY=false
          ./.github/scripts/install_dependencies.sh "sphinx sphinx-rtd-theme sphinx-autodoc-typehints myst-parser"

      - name: Prepare docs directory
        run: |
          # Remove existing docs if present
          if [ -d "docs" ]; then
            echo "Cleaning existing docs directory..."
            rm -rf docs/*
          else
            echo "Creating docs directory..."
            mkdir -p docs
          fi

      - name: Initialize Sphinx documentation
        run: |
          sphinx-quickstart docs --quiet --project="MICAP" \
            --author="MICAP Team" --release="1.0" --language="en" \
            --extensions="sphinx.ext.autodoc,sphinx.ext.viewcode,sphinx.ext.napoleon,sphinx_rtd_theme"

      - name: Configure Sphinx
        run: |
          cd docs
          # Update conf.py for better documentation
          cat >> conf.py << 'EOF'
          
          # MICAP-specific configuration
          import os
          import sys
          sys.path.insert(0, os.path.abspath('../src'))
          
          # Theme configuration
          html_theme = 'sphinx_rtd_theme'
          html_theme_options = {
              'navigation_depth': 4,
              'collapse_navigation': False,
              'sticky_navigation': True,
              'includehidden': True,
              'titles_only': False
          }
          
          # Extension configuration
          autodoc_default_options = {
              'members': True,
              'undoc-members': True,
              'show-inheritance': True,
              'special-members': '__init__',
          }
          
          napoleon_google_docstring = True
          napoleon_numpy_docstring = True
          napoleon_include_init_with_doc = False
          napoleon_include_private_with_doc = False
          
          EOF

      - name: Generate API documentation
        run: |
          cd docs
          sphinx-apidoc -o . ../src --force --module-first
          
          # Create a better index.rst
          cat > index.rst << 'EOF'
          MICAP Documentation
          ==================
          
          Market Intelligence & Competitor Analysis Platform
          
          .. toctree::
             :maxdepth: 2
             :caption: Contents:
          
             modules
          
          Indices and tables
          ==================
          
          * :ref:`genindex`
          * :ref:`modindex`
          * :ref:`search`
          EOF

      - name: Build HTML documentation
        run: |
          cd docs
          make html

      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/_build/html/

      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/_build/html/

  # =====================================
  # Check README and Documentation
  # =====================================
  readme-check:
    name: Check README and Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README exists
        run: |
          if [ ! -f README.md ]; then
            echo "README.md is missing!"
            exit 1
          fi

      - name: Check README content
        run: |
          wc -l README.md
          if [ $(wc -l < README.md) -lt 10 ]; then
            echo "README.md is too short (less than 10 lines)"
            exit 1
          fi

      - name: Check for documentation files
        run: |
          echo "Checking for documentation files..."
          find . -name "*.md" -type f
          find . -name "*.rst" -type f 