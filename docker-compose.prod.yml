version: '3.8'

# Production Docker Compose for MICAP
# Optimized for production deployment with minimal services

services:
  # =====================================
  # Main Application
  # =====================================
  micap-api:
    image: ${REGISTRY:-your-registry.com}/micap:${VERSION:-1.0.0}-${ENV:-prod}-production
    container_name: micap-api-prod
    ports:
      - "${API_PORT:-8000}:8000"
    environment:
      - ENV=production
      - DATABASE_URL=${DATABASE_URL:-postgresql://micap_user:micap_password@postgres:5432/micap_db}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    volumes:
      - api_logs:/app/logs
      - api_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - micap-network

  # =====================================
  # Database
  # =====================================
  postgres:
    image: postgres:15-alpine
    container_name: micap-postgres-prod
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-micap_db}
      - POSTGRES_USER=${POSTGRES_USER:-micap_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-micap_password}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-micap_user} -d ${POSTGRES_DB:-micap_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - micap-network

  # =====================================
  # Cache
  # =====================================
  redis:
    image: redis:7-alpine
    container_name: micap-redis-prod
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    networks:
      - micap-network

  # =====================================
  # Monitoring (Optional)
  # =====================================
  nginx:
    image: nginx:alpine
    container_name: micap-nginx-prod
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - micap-api
    restart: unless-stopped
    networks:
      - micap-network

# =====================================
# Networks
# =====================================
networks:
  micap-network:
    driver: bridge
    name: micap-prod-network

# =====================================
# Volumes
# =====================================
volumes:
  postgres_data:
    driver: local
    name: micap-postgres-data
  redis_data:
    driver: local
    name: micap-redis-data
  api_logs:
    driver: local
    name: micap-api-logs
  api_data:
    driver: local
    name: micap-api-data
  nginx_logs:
    driver: local
    name: micap-nginx-logs 