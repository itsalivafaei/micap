[build-system]
requires = ["setuptools>=68.0", "wheel", "setuptools-scm"]
build-backend = "setuptools.build_meta"

[project]
name = "micap"
dynamic = ["version"]
description = "Market Intelligence & Competitor Analysis Platform"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MICAP Team", email = "team@micap.io"}
]
maintainers = [
    {name = "MICAP Team", email = "team@micap.io"}
]
keywords = ["sentiment analysis", "machine learning", "market intelligence", "nlp", "spark"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]
requires-python = ">=3.11"
dependencies = [
    "pyspark~=4.0.0",
    "numpy==1.26.4",
    "pandas~=2.2.3",
    "scikit-learn==1.5.0",
    "nltk==3.9.1",
    "spacy==3.7.2",
    "tensorflow==2.16.2",
    "torch==2.7.0",
    "transformers==4.50.0",
    "matplotlib==3.7.2",
    "seaborn==0.12.2",
    "tqdm==4.66.3",
    "emoji==2.14.1",
    "textblob==0.19.0",
    "vaderSentiment==3.3.2",
    "networkx==3.1",
    "python-dotenv==1.0.0",
    "mlflow==2.22.0",
    "keras~=3.10.0",
    "statsmodels~=0.14.4",
    "prophet~=1.1.6",
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "gunicorn>=21.0.0",
    "pydantic>=2.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "black>=23.7.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "pylint>=2.17.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "bandit>=1.7.0",
    "safety>=2.3.0",
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0",
    "sphinx-autodoc-typehints>=1.24.0",
    "myst-parser>=2.0.0",
]
testing = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "httpx>=0.24.0",
    "requests-mock>=1.11.0",
]

[project.urls]
Homepage = "https://github.com/your-org/micap"
Repository = "https://github.com/your-org/micap.git"
Issues = "https://github.com/your-org/micap/issues"
Documentation = "https://micap.readthedocs.io"

[project.scripts]
micap-train = "src.scripts.train_all_models:main"
micap-pipeline = "src.scripts.run_phase1_pipeline:main"
micap-api = "src.api.main:main"

[tool.setuptools_scm]
write_to = "src/_version.py"

[tool.setuptools.packages.find]
where = ["src"]
include = ["src*"]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.flake8]
max-line-length = 100
ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".venv",
    ".tox",
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = [
    "pyspark.*",
    "vaderSentiment.*",
    "textblob.*",
    "spacy.*",
    "sklearn.*",
    "tensorflow.*",
    "torch.*",
    "transformers.*",
    "matplotlib.*",
    "seaborn.*",
    "wordcloud.*",
    "nltk.*",
    "mlflow.*",
    "prophet.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "spark: marks tests that require Spark",
    "ml: marks tests for machine learning models",
    "api: marks tests for API endpoints",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.bandit]
exclude_dirs = ["tests", "scripts"]
skips = ["B101", "B601"]

[tool.pylint.messages_control]
disable = [
    "C0103",  # Invalid name
    "R0903",  # Too few public methods
    "R0913",  # Too many arguments
    "W0613",  # Unused argument
    "C0301",  # Line too long (handled by black)
    "R0801",  # Similar lines in files
]

[tool.pylint.format]
max-line-length = 100 